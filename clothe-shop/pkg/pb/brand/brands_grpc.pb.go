// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: pkg/pb/brands.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BrandsService_CreateBrand_FullMethodName = "/auth.BrandsService/CreateBrand"
	BrandsService_ShowBrand_FullMethodName   = "/auth.BrandsService/ShowBrand"
	BrandsService_ListBrand_FullMethodName   = "/auth.BrandsService/ListBrand"
	BrandsService_UpdateBrand_FullMethodName = "/auth.BrandsService/UpdateBrand"
	BrandsService_DeleteBrand_FullMethodName = "/auth.BrandsService/DeleteBrand"
)

// BrandsServiceClient is the client API for BrandsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrandsServiceClient interface {
	CreateBrand(ctx context.Context, in *Brand, opts ...grpc.CallOption) (*Brand, error)
	ShowBrand(ctx context.Context, in *ShowBrandRequest, opts ...grpc.CallOption) (*Brand, error)
	ListBrand(ctx context.Context, in *ListBrandRequest, opts ...grpc.CallOption) (*BrandList, error)
	UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*Brand, error)
	DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...grpc.CallOption) (*Brand, error)
}

type brandsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrandsServiceClient(cc grpc.ClientConnInterface) BrandsServiceClient {
	return &brandsServiceClient{cc}
}

func (c *brandsServiceClient) CreateBrand(ctx context.Context, in *Brand, opts ...grpc.CallOption) (*Brand, error) {
	out := new(Brand)
	err := c.cc.Invoke(ctx, BrandsService_CreateBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsServiceClient) ShowBrand(ctx context.Context, in *ShowBrandRequest, opts ...grpc.CallOption) (*Brand, error) {
	out := new(Brand)
	err := c.cc.Invoke(ctx, BrandsService_ShowBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsServiceClient) ListBrand(ctx context.Context, in *ListBrandRequest, opts ...grpc.CallOption) (*BrandList, error) {
	out := new(BrandList)
	err := c.cc.Invoke(ctx, BrandsService_ListBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsServiceClient) UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*Brand, error) {
	out := new(Brand)
	err := c.cc.Invoke(ctx, BrandsService_UpdateBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsServiceClient) DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...grpc.CallOption) (*Brand, error) {
	out := new(Brand)
	err := c.cc.Invoke(ctx, BrandsService_DeleteBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrandsServiceServer is the server API for BrandsService service.
// All implementations must embed UnimplementedBrandsServiceServer
// for forward compatibility
type BrandsServiceServer interface {
	CreateBrand(context.Context, *Brand) (*Brand, error)
	ShowBrand(context.Context, *ShowBrandRequest) (*Brand, error)
	ListBrand(context.Context, *ListBrandRequest) (*BrandList, error)
	UpdateBrand(context.Context, *UpdateBrandRequest) (*Brand, error)
	DeleteBrand(context.Context, *DeleteBrandRequest) (*Brand, error)
	mustEmbedUnimplementedBrandsServiceServer()
}

// UnimplementedBrandsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBrandsServiceServer struct {
}

func (UnimplementedBrandsServiceServer) CreateBrand(context.Context, *Brand) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedBrandsServiceServer) ShowBrand(context.Context, *ShowBrandRequest) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBrand not implemented")
}
func (UnimplementedBrandsServiceServer) ListBrand(context.Context, *ListBrandRequest) (*BrandList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBrand not implemented")
}
func (UnimplementedBrandsServiceServer) UpdateBrand(context.Context, *UpdateBrandRequest) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedBrandsServiceServer) DeleteBrand(context.Context, *DeleteBrandRequest) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrand not implemented")
}
func (UnimplementedBrandsServiceServer) mustEmbedUnimplementedBrandsServiceServer() {}

// UnsafeBrandsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrandsServiceServer will
// result in compilation errors.
type UnsafeBrandsServiceServer interface {
	mustEmbedUnimplementedBrandsServiceServer()
}

func RegisterBrandsServiceServer(s grpc.ServiceRegistrar, srv BrandsServiceServer) {
	s.RegisterService(&BrandsService_ServiceDesc, srv)
}

func _BrandsService_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Brand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServiceServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandsService_CreateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServiceServer).CreateBrand(ctx, req.(*Brand))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandsService_ShowBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServiceServer).ShowBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandsService_ShowBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServiceServer).ShowBrand(ctx, req.(*ShowBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandsService_ListBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServiceServer).ListBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandsService_ListBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServiceServer).ListBrand(ctx, req.(*ListBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandsService_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServiceServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandsService_UpdateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServiceServer).UpdateBrand(ctx, req.(*UpdateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandsService_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandsServiceServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandsService_DeleteBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandsServiceServer).DeleteBrand(ctx, req.(*DeleteBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrandsService_ServiceDesc is the grpc.ServiceDesc for BrandsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrandsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.BrandsService",
	HandlerType: (*BrandsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBrand",
			Handler:    _BrandsService_CreateBrand_Handler,
		},
		{
			MethodName: "ShowBrand",
			Handler:    _BrandsService_ShowBrand_Handler,
		},
		{
			MethodName: "ListBrand",
			Handler:    _BrandsService_ListBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _BrandsService_UpdateBrand_Handler,
		},
		{
			MethodName: "DeleteBrand",
			Handler:    _BrandsService_DeleteBrand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/brands.proto",
}
