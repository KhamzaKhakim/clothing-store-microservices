// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: pkg/pb/clothes.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClothesService_CreateClothe_FullMethodName = "/auth.ClothesService/CreateClothe"
	ClothesService_ShowClothe_FullMethodName   = "/auth.ClothesService/ShowClothe"
	ClothesService_ListClothe_FullMethodName   = "/auth.ClothesService/ListClothe"
	ClothesService_UpdateClothe_FullMethodName = "/auth.ClothesService/UpdateClothe"
	ClothesService_DeleteClothe_FullMethodName = "/auth.ClothesService/DeleteClothe"
)

// ClothesServiceClient is the client API for ClothesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClothesServiceClient interface {
	CreateClothe(ctx context.Context, in *Clothe, opts ...grpc.CallOption) (*Clothe, error)
	ShowClothe(ctx context.Context, in *ShowClotheRequest, opts ...grpc.CallOption) (*Clothe, error)
	ListClothe(ctx context.Context, in *ListClotheRequest, opts ...grpc.CallOption) (*ClotheList, error)
	UpdateClothe(ctx context.Context, in *UpdateClotheRequest, opts ...grpc.CallOption) (*Clothe, error)
	DeleteClothe(ctx context.Context, in *DeleteClotheRequest, opts ...grpc.CallOption) (*Clothe, error)
}

type clothesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClothesServiceClient(cc grpc.ClientConnInterface) ClothesServiceClient {
	return &clothesServiceClient{cc}
}

func (c *clothesServiceClient) CreateClothe(ctx context.Context, in *Clothe, opts ...grpc.CallOption) (*Clothe, error) {
	out := new(Clothe)
	err := c.cc.Invoke(ctx, ClothesService_CreateClothe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clothesServiceClient) ShowClothe(ctx context.Context, in *ShowClotheRequest, opts ...grpc.CallOption) (*Clothe, error) {
	out := new(Clothe)
	err := c.cc.Invoke(ctx, ClothesService_ShowClothe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clothesServiceClient) ListClothe(ctx context.Context, in *ListClotheRequest, opts ...grpc.CallOption) (*ClotheList, error) {
	out := new(ClotheList)
	err := c.cc.Invoke(ctx, ClothesService_ListClothe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clothesServiceClient) UpdateClothe(ctx context.Context, in *UpdateClotheRequest, opts ...grpc.CallOption) (*Clothe, error) {
	out := new(Clothe)
	err := c.cc.Invoke(ctx, ClothesService_UpdateClothe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clothesServiceClient) DeleteClothe(ctx context.Context, in *DeleteClotheRequest, opts ...grpc.CallOption) (*Clothe, error) {
	out := new(Clothe)
	err := c.cc.Invoke(ctx, ClothesService_DeleteClothe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClothesServiceServer is the server API for ClothesService service.
// All implementations must embed UnimplementedClothesServiceServer
// for forward compatibility
type ClothesServiceServer interface {
	CreateClothe(context.Context, *Clothe) (*Clothe, error)
	ShowClothe(context.Context, *ShowClotheRequest) (*Clothe, error)
	ListClothe(context.Context, *ListClotheRequest) (*ClotheList, error)
	UpdateClothe(context.Context, *UpdateClotheRequest) (*Clothe, error)
	DeleteClothe(context.Context, *DeleteClotheRequest) (*Clothe, error)
	mustEmbedUnimplementedClothesServiceServer()
}

// UnimplementedClothesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClothesServiceServer struct {
}

func (UnimplementedClothesServiceServer) CreateClothe(context.Context, *Clothe) (*Clothe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClothe not implemented")
}
func (UnimplementedClothesServiceServer) ShowClothe(context.Context, *ShowClotheRequest) (*Clothe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowClothe not implemented")
}
func (UnimplementedClothesServiceServer) ListClothe(context.Context, *ListClotheRequest) (*ClotheList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClothe not implemented")
}
func (UnimplementedClothesServiceServer) UpdateClothe(context.Context, *UpdateClotheRequest) (*Clothe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClothe not implemented")
}
func (UnimplementedClothesServiceServer) DeleteClothe(context.Context, *DeleteClotheRequest) (*Clothe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClothe not implemented")
}
func (UnimplementedClothesServiceServer) mustEmbedUnimplementedClothesServiceServer() {}

// UnsafeClothesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClothesServiceServer will
// result in compilation errors.
type UnsafeClothesServiceServer interface {
	mustEmbedUnimplementedClothesServiceServer()
}

func RegisterClothesServiceServer(s grpc.ServiceRegistrar, srv ClothesServiceServer) {
	s.RegisterService(&ClothesService_ServiceDesc, srv)
}

func _ClothesService_CreateClothe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Clothe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClothesServiceServer).CreateClothe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClothesService_CreateClothe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClothesServiceServer).CreateClothe(ctx, req.(*Clothe))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClothesService_ShowClothe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowClotheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClothesServiceServer).ShowClothe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClothesService_ShowClothe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClothesServiceServer).ShowClothe(ctx, req.(*ShowClotheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClothesService_ListClothe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClotheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClothesServiceServer).ListClothe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClothesService_ListClothe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClothesServiceServer).ListClothe(ctx, req.(*ListClotheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClothesService_UpdateClothe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClotheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClothesServiceServer).UpdateClothe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClothesService_UpdateClothe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClothesServiceServer).UpdateClothe(ctx, req.(*UpdateClotheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClothesService_DeleteClothe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClotheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClothesServiceServer).DeleteClothe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClothesService_DeleteClothe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClothesServiceServer).DeleteClothe(ctx, req.(*DeleteClotheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClothesService_ServiceDesc is the grpc.ServiceDesc for ClothesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClothesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.ClothesService",
	HandlerType: (*ClothesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClothe",
			Handler:    _ClothesService_CreateClothe_Handler,
		},
		{
			MethodName: "ShowClothe",
			Handler:    _ClothesService_ShowClothe_Handler,
		},
		{
			MethodName: "ListClothe",
			Handler:    _ClothesService_ListClothe_Handler,
		},
		{
			MethodName: "UpdateClothe",
			Handler:    _ClothesService_UpdateClothe_Handler,
		},
		{
			MethodName: "DeleteClothe",
			Handler:    _ClothesService_DeleteClothe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/clothes.proto",
}
